===========
Development
===========

On this page you can find some pointers and remarks regarding development for this project.



Setup
-----

You definitely want to create an isolated python environment for development.
That way the required packages you are going to install with ``pip`` are encapsulated form your systemwide python installation. 
For more info check https://virtualenv.pypa.io/en/latest/
The packages listed within ``requirements.txt`` are only needed for development and are subject to change. 

::

  [john@desktop ~]$ cd gaspy
  [john@desktop gaspy]$ virtualenv -p ENV
  [john@desktop gaspy]$ source ENV/bin/activate
  (ENV) [john@desktop gaspy]$ pip install -r requirements.txt
  (ENV) [john@desktop gaspy]$

You can activate your new python environment like this:

::

  [john@desktop gaspy]$ source ENV/bin/activate
  (ENV) [john@desktop gaspy]$

Once you're done playing with it, deactivate it with the following command:

::

  (ENV) [john@desktop gaspy]$ deactivate
  [john@desktop gaspy]$



Config files
------------

pyproject.toml
~~~~~~~~~~~~~~

Set the default line width which is used by ``black``.


tox.ini
~~~~~~~

``tox`` is a generic virtualenv management and test command line tool.
For more info check https://tox.readthedocs.io/en/latest/

``tox.ini`` contains:

* various tool options/overrides for various tools like ``flake8`` or ``black``
* definitions of test environments which are used
* various helper commands like ``build``, ``docs``, or ``publish``



Tests
-----

``pytest`` and ``tox``  are used for testing. The tests and the needed files are located within the ``test`` directory. 
To run the tests simply call ``tox -e pytest`` from the project root with the virtual environment enabled.
``tox`` will take care of installing the *gaspy* package in development mode and run the tests against it.


Scope of tests
~~~~~~~~~~~~~~

Tests are run against:

* the *gaspy* package (this way also the code-coverage is determined)
* the *gaspy* CLI tool


Objectcode verification
~~~~~~~~~~~~~~~~~~~~~~~

Peter Ashenden's original Gumnut Assembler implementation *gasm* was used to assemble the sources from ``test\asm_source``.
The generated files (instruction and data memory) are located in ``test\gasm_output``.
For the test ``test_objectcode_comparison_static`` the files generated by *gaspy* are compared to those from *gasm*.

In future versions I'd like to implement the ``test_objectcode_comparison_dynamic`` again. This would assemble the sources with *gasm* during runtime of the tests.



Packaging for PyPI
------------------

To package the project for distribution and publishing it on PyPI a few steps are involved.
For more information see https://packaging.python.org/tutorials/packaging-projects/

* Set version in ``gaspy\__init__.py``
* Run ``tox -e build``
* Run ``tox -e publish-test``
* Download and install from test index ``python -m pip install --index-url https://test.pypi.org/simple/ --no-deps gaspy``

If all seems alright, repeat above steps and upload to the real PyPI.

* Run ``tox -e publish``
* Download and install from live index ``python -m pip install gaspy``



Misc
----

*needs more explanation and structure*

* Using ``black`` for auto-formatting and styling the source code
* Line width 120
* Development on Linux and Windows possible
